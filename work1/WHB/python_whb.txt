Par1 Python基础
1.1数据类型和变量
常规的整数、浮点数、布尔类型跟C语言是一样的，字符串推荐使用的是双引号，其中如果有特别地比如'"\等特殊字符，需要用转义字符。不同的是，Python不需要根据变量类型定义变量，直接赋值即可。

1.2字符串和编码
UTF-8编码――可变长编码。另外也采用%作为格式化字符串

1.3使用list和tuple
list，列表，用[]定义。索引顺序（从前往后）0,1，2……；逆序（从后往前）-1，-2，……，不可越界。list.方法名，可用来调用list内置方法，比如增删改等操作，且通过该方法不改变变量地址。
tuple，元组。跟列表区别，①元组的元素不能修改，②用（）定义

1.4条件判断
if 条件：
    代码
elif 条件：
    代码
else:
    代码

1.5循环
（1）for循环遍历
for 循环内部变量 in 范围：
    代码
（2）while
while 条件：
    代码

break和continue用法跟C一样，break退出循环，continue跳出当前循环，直接开始下一次循环

1.6使用dict和set
dict，字典。采用key-value无序存储。
set类似dict，但不存储value。
可变数据类型：列表、元组
不可变数据类型：数字类型、字符串、元组

Part2
2.1调用函数
函数调用要根据函数定义传入正确的参数。可按Ctrl+Q查看相关细节。

2.2定义函数
def定义函数，可用pass语句做占位符，保证代码结构完整。return可返回结果，当有多个返回值时，实际返回的是一个tuple。

2.3函数的参数
可变参数：在定义函数的参数前加一个*，可设置为可变参数，即参数个数可变，传入的是一个tuple，甚至可以接受0个元素。
关键字参数：类比可变参数，关键字参数是传入一个dict，参数前加**。
参数定义的顺序：必选参数、默认参数、可变参数、明明关键字参数和关键字参数。

2.4递归函数
递归，即函数内部再次调用本身函数。

Par3高级特性
3.1切片
针对对象：字符串、列表、元组
操作对象[开始索引：结束索引：步长]

3.2迭代
已描述过，利用for循环迭代遍历。

3.3列表生成式
同样利用for语句快速高效生成所需列表。

3.4生成器
类似列表生成式，而是将[]换成（），并且通常用for循环展现结果。

3.5迭代器
凡是可作用域for循环的对象都是Iterable类型，当然本质上还是不断调用next()实现的。

Part4函数式编程
4.1高阶函数
4.1.1map/reduce
map相当于简化了的for循环，接受一个函数和一个序列，实现一个函数作用于序列中的元素。
reduce是一个累计的过程，即把当前结果与下一个元素继续做计算。

4.1.2filter
与map区别，filter在将函数作用于序列的每一个元素后，根据返回值时True还是False决定保留还是丢弃该元素。

4.1.3sorted
用于列表字符串字典等的排序，默认按照ASCII大小，但可设定排序的关键字key。

4.2返回函数
函数既可以返回计算结果也可以返回一个函数，但要注意的是，返回函数中不要饮用任何可能发生变化的变量。

4.3匿名函数
lambda，用于临时做一个简单的计算，而不需要定义新函数。

4.4装饰器
以函数形式定义装饰器log（decorator），在装饰的函数上一行写入@log。这样即可运行被装饰函数内容又可运行装饰器的内容，且不用改变被装饰函数。

4.5偏函数
functools.partial将一些参数设为默认值，方便调用。

Part5模块
通过导入模块，即可使用模块内的所有功能。

Part6面向对象编程
6.1 类和实例
类中定义函数，只是多了一个self变量。
方法类似列表、元组的方法，可以直接内部调用，其内部实际细节不必考虑。

6.2访问限制
属性名称前加__就变成私有变量，只可以内部访问，不可外部访问。如要外部要访问或修改则通过设定返回数据的方法即可。此外，以双划线开头并以双划线结尾的，是特殊变量。因此，在平时写代码时，一定要注意格式。

6.3继承和多态
继承可获得父类的全部功能。多态，只要知道是谁的子类，那即可直接调用父类的功能，不用管细节。

6.4获取对象信息
type、isinstance、dir可查看类型，isinstance对于类更方便些，dir查看的更加详细。

6.5实例属性和类属性
类属性归类所有，所有实例均可共用，实例属性归具体实例所有，与其他实例互不干扰。

Part7面向对象高级编程
7.1使用__slots__
动态绑定方法，若单对某一实例绑定，则仅该实例内可用，若给class绑定，则所有实例均可用。__slots__可用来限制class实例能添加的属性。

7.2使用@property
属于装饰器，将方法变成属性，方便调用，且不易出错。

7.3多重继承
通过多重继承，一个子类可同时获得多个父类的所有功能。

7.4定制类
__str__可优化返回结果，__iter__与__next__用于迭代循环，__getitem__像list一样取出相应元素，__getattr__动态化处理属性，__call__在实例上直接调用方法。

7.5使用枚举类
Enum定义一个class类型，每个常量都是class的一个唯一实例。

7.6使用元类
type既可以返回对象类型也可创建出新的类型。metaclass隐式地继承到子类，是比较魔术性的对象。