# -*- coding: utf-8 -*-
"""
Created on Thu Sep 27 17:15:47 2018

@author: zhe

E-mail：1194585271@qq.com
"""

#type()
#动态语言和静态语言最大的不同，就是函数和类的定义，不是编译时定义的，而是运行时动态创建的。
#
#比方说我们要定义一个Hello的class，就写一个hello.py模块：

#要创建一个class对象，type()函数依次传入3个参数：
#
#class的名称；
#继承的父类集合，注意Python支持多重继承，如果只有一个父类，别忘了tuple的单元素写法；
#class的方法名称与函数绑定，这里我们把函数fn绑定到方法名hello上。
#通过type()函数创建的类和直接写class是完全一样的，因为Python解释器遇到class定义时，仅仅是扫描一下class定义的语法，然后调用type()函数创建出class。
#
#正常情况下，我们都用class Xxx...来定义类，但是，type()函数也允许我们动态创建出类来，也就是说，动态语言本身支持运行期动态创建类，这和静态语言有非常大的不同，要在静态语言运行期创建类，必须构造源代码字符串再调用编译器，或者借助一些工具生成字节码实现，本质上都是动态编译，会非常复杂。

#metaclass
#除了使用type()动态创建类以外，要控制类的创建行为，还可以使用metaclass。
#
#metaclass，直译为元类，简单的解释就是：
#
#当我们定义了类以后，就可以根据这个类创建出实例，所以：先定义类，然后创建实例。
#
#但是如果我们想创建出类呢？那就必须根据metaclass创建出类，所以：先定义metaclass，然后创建类。
#
#连接起来就是：先定义metaclass，就可以创建类，最后创建实例。
#
#所以，metaclass允许你创建类或者修改类。换句话说，你可以把类看成是metaclass创建出来的“实例”。
#
#metaclass是Python面向对象里最难理解，也是最难使用的魔术代码。


#小结
#metaclass是Python中非常具有魔术性的对象，它可以改变类创建时的行为。这种强大的功能使用起来务必小心。

